# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.
ARG ROOT_CONTAINER=ubuntu:focal
FROM $ROOT_CONTAINER

LABEL maintainer="Sebastian Lehrig <sebastian.lehrig1@ibm.com>"

ARG NB_USER="jovyan"
ARG NB_UID="1000"
ARG NB_GID="100"
ARG conda_version="4.10.3"
ARG miniforge_patch_number="3"
ARG miniforge_python="Mambaforge"
ARG miniforge_version="${conda_version}-${miniforge_patch_number}"
ARG IBM_POWERAI_LICENSE_ACCEPT=yes
ARG PYTHON_VERSION=default
ARG TARGET_RUNTIME="tensorflow-cpu"
ARG TENSORFLOW_VERSION=2.5.1
ARG ELYRA_VERSION=3.2.0

ENV DEBIAN_FRONTEND noninteractive
ENV XDG_CACHE_HOME="/home/${NB_USER}/.cache/"
ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    NB_USER=$NB_USER \
    NB_UID=$NB_UID \
    NB_GID=$NB_GID \
    NB_PREFIX=/
ENV PATH="${CONDA_DIR}/bin:${PATH}" \
    HOME="/home/${NB_USER}" \
    CONDA_VERSION="${conda_version}" \
    MINIFORGE_VERSION="${miniforge_version}"

# Fix DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

USER root

# Copy a script that we will use to correct permissions after running certain commands
COPY fix-permissions /usr/local/bin/fix-permissions
RUN chmod a+rx /usr/local/bin/fix-permissions

# Runs executed as root
RUN apt-get update --yes && \
    apt-get install --yes --no-install-recommends \
    # ----
    tini \
    wget \
    ca-certificates \
    sudo \
    locales \
    fonts-liberation \
    run-one \
    # ----
    vim-tiny \
    git \
    inkscape \
    libsm6 \
    libxext-dev \
    libxrender1 \
    lmodern \
    netcat \
    openssh-client \
    # ---- nbconvert dependencies ----
    texlive-xetex \
    texlive-fonts-recommended \
    texlive-plain-generic \
    # ----
    tzdata \
    unzip \
    nano-tiny \
    # ----
    ffmpeg \
    dvipng \
    cm-super \
    && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && \
    echo $NB_USER" ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers && \
    echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen && \
    update-alternatives --install /usr/bin/nano nano /bin/nano-tiny 10 && \
    sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc && \
    echo 'eval "$(command conda shell.bash hook 2> /dev/null)"' >> /etc/skel/.bashrc && \
    echo "auth requisite pam_deny.so" >> /etc/pam.d/su && \
    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \
    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \
    groupadd -f --gid 1337 $NB_USER && \
    useradd -l -m -s /bin/bash -N -u "${NB_UID}" "${NB_USER}" && \
    mkdir -p "${CONDA_DIR}" && \
    chown "${NB_USER}:${NB_GID}" "${CONDA_DIR}" && \
    chmod g+w /etc/passwd && \
    fix-permissions "${HOME}" && \
    fix-permissions "${CONDA_DIR}"

ENV LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8

USER ${NB_UID}

WORKDIR /tmp

# Runs executed as NB_UID
RUN case "$TARGET_RUNTIME" in \
       "tensorflow-cpu") export RUNTIME_INSTALL=\"tensorflow-cpu=$TENSORFLOW_VERSION\" \
       ;; \
       "tensorflow") export RUNTIME_INSTALL=\"tensorflow=$TENSORFLOW_VERSION\" \
       ;; \
    esac && \
    mkdir "/home/${NB_USER}/work" && \
    # Prerequisites installation: conda, mamba, pip, tini
    set -x && \
    miniforge_arch=$(uname -m) && \
    export miniforge_arch && \
    miniforge_installer="${miniforge_python}-${miniforge_version}-Linux-${miniforge_arch}.sh" && \
    export miniforge_installer && \
    wget --quiet "https://github.com/conda-forge/miniforge/releases/download/${miniforge_version}/${miniforge_installer}" && \
    /bin/bash "${miniforge_installer}" -f -b -p "${CONDA_DIR}" && \
    rm "${miniforge_installer}" && \
    # Conda configuration see https://conda.io/projects/conda/en/latest/configuration.html
    echo "conda ${CONDA_VERSION}" >> "${CONDA_DIR}/conda-meta/pinned" && \
    conda config --system --set auto_update_conda false && \
    conda config --system --set show_channel_urls true && \
    conda config --system --set channel_priority true && \
    conda config --system --prepend channels https://opence.mit.edu/ && \
    conda config --system --prepend channels https://ftp.osuosl.org/pub/open-ce/current/ && \
    conda config --system --prepend channels https://public.dhe.ibm.com/ibmdl/export/pub/software/server/ibm-ai/conda/ && \
    if [[ "${PYTHON_VERSION}" != "default" ]]; then conda install --yes python="${PYTHON_VERSION}"; fi && \
    conda list python | grep '^python ' | tr -s ' ' | cut -d ' ' -f 1,2 >> "${CONDA_DIR}/conda-meta/pinned" && \
    conda install --quiet --yes \
    # ----
    "conda=${CONDA_VERSION}" \
    'pip' \
    # ----
    'notebook' \
    'jupyterhub' \
    'jupyterlab' \
    # ----
    # Elyra deps
    'pynacl' \
    'regex' \
    'ujson' \
    # ----
    'altair' \
    'beautifulsoup4' \
    'bokeh' \
    'bottleneck' \
    'cloudpickle' \
    'conda-forge::blas=*=openblas' \
    'cython' \
    'dask' \
    'dill' \
    'h5py' \
    'ipympl'\
    'ipywidgets' \
    'matplotlib-base' \
    'numba' \
    'numexpr' \
    'pandas' \
    'patsy' \
    'protobuf' \
    'pytables' \
    'scikit-image' \
    'scikit-learn' \
    'scipy' \
    'seaborn' \
    'sqlalchemy' \
    'statsmodels' \
    'sympy' \
    "${RUNTIME_INSTALL}" \
    'widgetsnbextension'\
    'xlrd' && \
    conda update --all --quiet --yes && \
    pip install --quiet --no-cache-dir \
    ##################
    # pip packages
    "elyra==${ELYRA_VERSION}" \
    ##################
    && \
    jupyter lab build && \
    ##################
    conda clean --all -f -y && \
    npm cache clean --force && \
    jupyter notebook --generate-config && \
    jupyter lab clean && \
    rm -rf "/home/${NB_USER}/.cache/yarn" && \
    # Install facets which does not have a pip or conda package at the moment
    git clone https://github.com/PAIR-code/facets.git && \
    jupyter nbextension install facets/facets-dist/ --sys-prefix && \
    rm -rf facets && \
    MPLBACKEND=Agg python -c "import matplotlib.pyplot" && \
    # Clean-Up
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

EXPOSE 8888

# Configure container startup
ENTRYPOINT ["tini", "-g", "--"]
CMD ["start.sh"]

# Copy local files as late as possible to avoid cache busting
COPY start.sh post_jupyter_start.sh /usr/local/bin/
# Currently need to have both jupyter_notebook_config and jupyter_server_config to support classic and lab
COPY jupyter_notebook_config.py /etc/jupyter/

# Fix permissions on /etc/jupyter as root
USER root

# Prepare upgrade to JupyterLab V3.0 #1205
RUN sed -re "s/c.NotebookApp/c.ServerApp/g" \
    /etc/jupyter/jupyter_notebook_config.py > /etc/jupyter/jupyter_server_config.py && \
    fix-permissions /usr/local/bin/ && \
    fix-permissions /etc/jupyter/ && \
    chmod +x /usr/local/bin/start.sh /usr/local/bin/post_jupyter_start.sh

# Switch back to jovyan to avoid accidental container runs as root
USER ${NB_UID}

WORKDIR "${HOME}"


